# Generated by Django 2.1.7 on 2019-03-08 09:07

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('assets', '0002_auto_20190308_1706'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('interval', models.IntegerField(default=300, verbose_name='告警间隔(s)')),
                ('recover_notice', models.BooleanField(default=True, verbose_name='故障恢复后发送通知消息')),
                ('recover_subject', models.CharField(blank=True, max_length=128, null=True)),
                ('recover_message', models.TextField(blank=True, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('host_groups', models.ManyToManyField(blank=True, to='assets.BusinessUnit')),
            ],
            options={
                'verbose_name_plural': '报警策略',
                'db_table': 'Action',
            },
        ),
        migrations.CreateModel(
            name='ActionOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('step', models.SmallIntegerField(default=1, help_text='当trigger触发次数小于这个值时就执行这条记录里报警方式', verbose_name='第n次告警')),
                ('action_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('script', 'RunScript')], default='email', max_length=64, verbose_name='动作类型')),
                ('msg_format', models.TextField(default='Host({hostname},{ip}) service({service_name}) has issue,msg:{msg}', verbose_name='消息格式')),
                ('notifiers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='通知对象')),
            ],
            options={
                'verbose_name_plural': '报警动作',
                'db_table': 'ActionOperation',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.SmallIntegerField(choices=[(0, '报警事件'), (1, '维护事件')], default=0)),
                ('log', models.TextField(blank=True, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '报警日志',
                'db_table': 'EventLog',
            },
        ),
        migrations.CreateModel(
            name='MonitorHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitored_by', models.CharField(choices=[('agent', 'Agent'), ('snmp', 'SNMP'), ('wget', 'WGET')], max_length=64, verbose_name='监控方式')),
                ('host_alive_check_interval', models.IntegerField(default=30, verbose_name='主机存活状态检测间隔')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('asset', models.OneToOneField(on_delete=None, to='assets.Asset', verbose_name='资产')),
            ],
            options={
                'verbose_name_plural': '监控资产',
                'db_table': 'MonitorHost',
            },
        ),
        migrations.CreateModel(
            name='MonitorHostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='业务组')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('host_group', models.OneToOneField(on_delete=None, to='assets.BusinessUnit', verbose_name='业务组')),
            ],
            options={
                'verbose_name_plural': '主机组',
                'db_table': 'MonitorHostGroup',
            },
        ),
        migrations.CreateModel(
            name='MonitorService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='服务名称')),
                ('interval', models.IntegerField(default=60, verbose_name='监控间隔')),
                ('plugin_name', models.CharField(default='n/a', max_length=64, verbose_name='插件名')),
                ('has_sub_service', models.BooleanField(default=False, help_text='如果一个服务还有独立的子服务 ,选择这个,比如 网卡服务有多个独立的子网卡')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '监控服务',
                'db_table': 'MonitorService',
            },
        ),
        migrations.CreateModel(
            name='MonitorServiceIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='监控服务指标')),
                ('key', models.CharField(max_length=64, unique=True)),
                ('data_type', models.CharField(choices=[('int', 'int'), ('float', 'float'), ('str', 'string')], default='int', max_length=32, verbose_name='指标数据类型')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '监控服务指标',
                'db_table': 'MonitorServiceIndex',
            },
        ),
        migrations.CreateModel(
            name='MonitorTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='模版名称')),
                ('services', models.ManyToManyField(to='monitor.MonitorService', verbose_name='服务列表')),
            ],
            options={
                'verbose_name_plural': '监控模板',
                'db_table': 'MonitorTemplate',
            },
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='触发器名称')),
                ('severity', models.IntegerField(choices=[(1, 'Information'), (2, 'Warning'), (3, 'Average'), (4, 'High'), (5, 'Diaster')], verbose_name='告警级别')),
                ('enabled', models.BooleanField(default=True)),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '触发器',
                'db_table': 'Trigger',
            },
        ),
        migrations.CreateModel(
            name='TriggerExpression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specified_index_key', models.CharField(blank=True, max_length=64, null=True, verbose_name='只监控专门指定的指标key')),
                ('operator_type', models.CharField(choices=[('eq', '='), ('lt', '<'), ('gt', '>')], max_length=32, verbose_name='运算符')),
                ('data_calc_func', models.CharField(choices=[('avg', 'Average'), ('max', 'Max'), ('hit', 'Hit'), ('last', 'Last')], max_length=64, verbose_name='数据处理方式')),
                ('data_calc_args', models.CharField(help_text='若是多个参数,则用,号分开,第一个值是时间', max_length=64, verbose_name='函数传入参数')),
                ('threshold', models.IntegerField(verbose_name='阈值')),
                ('logic_type', models.CharField(blank=True, choices=[('or', 'OR'), ('and', 'AND')], max_length=32, null=True, verbose_name='与一个条件的逻辑关系')),
                ('service', models.ForeignKey(on_delete=None, to='monitor.MonitorService', verbose_name='关联服务')),
                ('service_index', models.ForeignKey(on_delete=None, to='monitor.MonitorServiceIndex', verbose_name='关联服务指标')),
                ('trigger', models.ForeignKey(on_delete=None, to='monitor.Trigger', verbose_name='所属触发器')),
            ],
            options={
                'verbose_name_plural': '监控属性',
                'db_table': 'TriggerExpression',
            },
        ),
        migrations.AddField(
            model_name='monitortemplate',
            name='triggers',
            field=models.ManyToManyField(blank=True, to='monitor.Trigger', verbose_name='触发器列表'),
        ),
        migrations.AddField(
            model_name='monitorservice',
            name='items',
            field=models.ManyToManyField(blank=True, to='monitor.MonitorServiceIndex', verbose_name='指标列表'),
        ),
        migrations.AddField(
            model_name='monitorhostgroup',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.MonitorTemplate'),
        ),
        migrations.AddField(
            model_name='monitorhost',
            name='host_groups',
            field=models.ForeignKey(on_delete=None, to='monitor.MonitorHostGroup', verbose_name='业务组'),
        ),
        migrations.AddField(
            model_name='monitorhost',
            name='templates',
            field=models.ManyToManyField(blank=True, to='monitor.MonitorTemplate'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='host',
            field=models.ForeignKey(on_delete=None, to='monitor.MonitorHost'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='trigger',
            field=models.ForeignKey(blank=True, null=True, on_delete=None, to='monitor.Trigger'),
        ),
        migrations.AddField(
            model_name='action',
            name='hosts',
            field=models.ManyToManyField(blank=True, to='monitor.MonitorHost'),
        ),
        migrations.AddField(
            model_name='action',
            name='operations',
            field=models.ManyToManyField(to='monitor.ActionOperation', verbose_name='报警动作'),
        ),
        migrations.AddField(
            model_name='action',
            name='triggers',
            field=models.ManyToManyField(blank=True, help_text='想让哪些trigger触发当前报警动作', to='monitor.Trigger'),
        ),
    ]
