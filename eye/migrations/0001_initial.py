# Generated by Django 2.1.7 on 2019-03-08 09:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assets', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('phone', models.CharField(blank=True, max_length=32, null=True, verbose_name='座机')),
                ('mobile', models.CharField(max_length=32, verbose_name='手机')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('bind_hosts', models.ManyToManyField(blank=True, to='assets.BindHost')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('host_groups', models.ManyToManyField(blank=True, to='assets.BusinessUnit')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户表',
                'db_table': 'UserProfile',
            },
        ),
        migrations.CreateModel(
            name='AdminInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '管理员表',
                'db_table': 'AdminInfo',
            },
        ),
        migrations.CreateModel(
            name='UserCmdLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(default='n/a', max_length=128)),
                ('closed', models.BooleanField(default=False)),
                ('cmd_count', models.IntegerField(default=0, verbose_name='命令执行数量')),
                ('stay_time', models.IntegerField(default=0, help_text='每次刷新自动计算停留时间', verbose_name='停留时长(seconds)')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='执行命令时间')),
                ('bind_host', models.ForeignKey(on_delete=None, to='assets.BindHost')),
                ('user', models.ForeignKey(on_delete=None, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '审计日志',
                'db_table': 'UserCmdLog',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='用户组名')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '用户组表',
                'db_table': 'UserGroup',
            },
        ),
    ]
